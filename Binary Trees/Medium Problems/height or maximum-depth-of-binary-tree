// problem link - https://leetcode.com/problems/maximum-depth-of-binary-tree/


class Solution {
public:
************************************************************************************************
    /* level order first ->
    
     in this approach we will try to push the the level of the node along with node using pair data structure so that we will get the deepest level.*/
//    int levelOrderFirst(TreeNode* root)
//     {
//         // if root is null return 1
//          if(!root) return 0;

//         queue<pair<TreeNode*,int>> q;
  
//         q.push({root,1});
//         int ans =0;

//         while(!q.empty())
//         {
//             TreeNode* root = q.front().first;
//             int level = q.front().second;
//             q.pop();
//             ans = max(ans,level);
//             if(root->left) q.push({root->left,level+1});
//             if(root->right) q.push({root->right,level+1});


//         }
//        return ans;
//     }
// ****************************************************************************

// level order second ->

/* in this approach we will find the deepest level but using a different method 
and return it */
    // int levelOrderSecond(TreeNode* root)
    // {
    //     // edge case when root is null
    //     if(!root) return 0;

    //     queue<TreeNode* > q;
    //     q.push(root);
        
    //     int level = 0 ;

    //     while(!q.empty())
    //     {
    //         int size = q.size();

    //          level++;

    //         while(size--)
    //         {
    //             TreeNode* node = q.front();
    //             q.pop();
    //             if(node->left) q.push(node->left);
    //             if(node->right) q.push(node->right);
    //         }
           
    //     }
    //     return  level;
    // }
    // ********************************************************************************
    
    //  recursive traversal approach 1->
    
    // we can use any traversal and declare a global variable ans = 0 and modify ans if the 
    // level is deeper than it and return it;
    // int ans =0;
    // void  recursiveTraversalFirst(TreeNode* root,int level)
    // {
    //    if(!root) return;
    //    ans = max(ans,level) ;

    //    recursiveTraversalFirst( root->left, level+1);
    //    recursiveTraversalFirst( root->right, level+1);
    // }
    // *******************************************************************************
    
     // recursive traversal approach 2 ->
     
     int recursiveTraversalSecond(TreeNode* root)
     {
        if(!root) return 0;

        return 1 + max(recursiveTraversalSecond(root->left),recursiveTraversalSecond(root->right));
     }
     
***************************************************  function *****************************************************************

    int maxDepth(TreeNode* root)
    {
        // return levelOrderFirst(root);

        // return levelOrderSecond(root);

        // recursiveTraversalFirst(root,1);
        // return ans;
        
        return recursiveTraversalSecond(root);
    }

};
